{
	
	function stockValue(stock) {
		if (stock === 'NOKIA') return 23;
		if (stock === 'ELISA') return 11;
	}

	function processLines(lines) {
		var obj = {
			statements: []
		};
		for (var i = 0; i < lines.length; i++) {
			obj.statements.push(lines[i][0]);
		}

		return obj;
	}

	function processDeclarations(declarations) {
		var stockdeclarations = {};
		for (var i = 0; i < declarations.length; i++) {
			var decobj = declarations[i][0];
			stockdeclarations[decobj.variable] = decobj.stock;
		}

		return stockdeclarations;	
	}

	function processArgs(additionals) {
		if (additionals[0].length === 0) {
			/* Only one arg */
			return [additionals[1]];
		}

		
		var argadditionals = []

		for (var i = 0; i < additionals[0].length; i++) {
			argadditionals.push(additionals[0][i][0]);
		}

		argadditionals.push(additionals[1]);

		return argadditionals;
	}	
}

start
  = _ declarations:(variableDeclaration _)* _ code:code _
	{
		return {
			declarations: processDeclarations(declarations),
			code: code
		}
	}
code
	= ifClause* 


variableDeclaration
	= "VAR" _ varname:string _ "=" _ s:stock _ ";"
	{
		return {variable: varname, stock: s}
	}

ifClause
	= "if" _ c1:clause _ comp:comparison _ c2:clause _ e:expression _ "endif" _
	{
		return {
			controlFlow: 'IF',
			clause1: c1,
			comparison: comp,
			clause2: c2,
			expressionIfTrue: e
		}
	}

clause
	= GETTER_EXPR
	/ integer 

GETTER_EXPR
	= "TOTAL_BALANCE" 
	{
		return {valueType: 'BALANCE'}
	}

	/ "STOCK_BALANCE"
	{
		return {valueType: 'STOCK'}
	}

	/ "CASH_BALANCE" 
	{
		return {valueType: 'CASH'}
	}

	/ "HAS_STOCK" "(" s:stock ")" 
	{
		return {getter: HAS_STOCK, stock: s}
	}

	/ "STOCK_VALUE" "(" s:stock ")" 
	{
		return {getter: 'STOCK_VALUE', stock: s}
	}

	/ "LAST_HOUR_CHANGE" "(" s:stock ")" 
	{
		return {getter: 'LAST_HOUR_CHANGE', stock: s}
	}

	/ "CHANGE_SINCE_MORNING" "(" s:stock ")" 
	{
		return {getter: 'CHANGE_SINCE_MORNING', stock: s}
	}

	/ "LAST_WEEK_CHANGE" "(" s:stock ")" 
	{
		return {getter: 'LAST_WEEK_CHANGE', stock: s}
	}

	/ "LAST_MONTH_CHANGE" "(" s:stock ")" 
	{
		return {getter: 'LAST_MONTH_CHANGE', stock: s}
	}

	/ "VALUE_AT_DATE" "(" date:date "," _ s:stock ")" 
	{
		return {getter: 'VALUE_AT_DATE', date: date, stock: s}
	}

	/ "QUANTITY_HELD" "(" s:stock ")" 	
	{
		return {getter: 'QUANTITY_HELD', stock: s}
	}

	/ "CURRENT_PROFIT_FROM" "(" s:stock ")" 	
	{
		return {getter: 'CURRENT_PROFIT_FROM', stock: s}
	}

	/ "CURRENT_PROFIT_PERC_FROM" "(" s:stock ")" 	
	{
		return {getter: 'CURRENT_PROFIT_PERC_FROM', stock: s}
	}

	/* User defined funcs */

	/ "EXTERNAL" "(" name:string "," _ args:additionalArgToExternal ")"
	{
		return {
			getter: 'EXTERNAL',
			name: name,
			args: processArgs(args)

		}
	}

/* 
How to allow dynamic number of arguments!
Answer: do it 'backwards' ... have optional first and compulsory last!
*/
additionalArgToExternal
	=  (arg "," _ )* arg

arg
	= GETTER_EXPR
	/ string
	/ integer

date 
	= d:integer "." m:integer "." y:integer
	{
		return {day: d, month: m, year: y}
	}	

stock
	= s:[A-Z]+ 
	{
		return s.join("");
	}		

expression
	= ifClause
	/ lines:(lineexpression ";" _)*
	{
		return processLines(lines);
	}


/* Note that order matters with === and == */
comparison
	= "<="
	/ ">="
	/ ">"
	/ "<"
	/ "==="	
	/ "=="
	/ "="



lineexpression
	= action
	/ "return"	{return {controlFlow: 'RETURN'}}

action 
	= "BUY_QUANTITY" a:amountstockclause 
	{
		return {action: 'BUY_QUANTITY', amount: a.amount, stock: a.stock}
	}

	/ "BUY_PERCENTAGE" a:amountstockclause 
	{
		return {action: 'BUY_PERCENTAGE', amount: a.amount, stock: a.stock}
	}

	/ "SELL_QUANTITY" a:amountstockclause 
	{
		return {action: 'SELL_QUANTITY', amount: a.amount, stock: a.stock}
	}

	/ "SELL_ALL_OF" s:stockclause 
	{
		return {action: 'SELL_ALL', stock: s}
	}

	/ "BAIL"
	{
		return {action: 'BAIL'}
	}

amountstockclause
	= "(" i:integer "," _ s:stock ")" {return {amount: i, stock: s}}

stockclause
	= "(" s:stock ")" {return s;}	

integer "integer"
  = digits:[0-9]+ { return {valueType: 'INT', value: parseInt(digits.join(""), 10) }}

string
	= s:[a-zA-Z]+ { return s.join("")}

// optional whitespace
_  = [ \t\r\n]* {return null}

// mandatory whitespace
__ = [ \t\r\n]+ {return null}