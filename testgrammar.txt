{
	
	function stockValue(stock) {
		if (stock === 'NOKIA') return 23;
		if (stock === 'ELISA') return 11;
	}

	function processLines(lines) {
		var obj = {
			nodeType: 'STAT_LIST',
			statements: []
		};
		for (var i = 0; i < lines.length; i++) {
			obj.statements.push(lines[i][0]);
		}

		return obj;
	}

	function processDeclarations(declarations) {
		var stockdeclarations = {};
		for (var i = 0; i < declarations.length; i++) {
			var decobj = declarations[i][0];
			stockdeclarations[decobj.variable] = decobj.binding;
		}

		return stockdeclarations;	
	}

	function processArgs(name, additionals) {
		if (additionals[0].length === 0) {
			/* Only one arg */
			return [name, additionals[1]];
		}

		
		var argadditionals = []

		for (var i = 0; i < additionals[0].length; i++) {
			argadditionals.push(additionals[0][i][0]);
		}

		argadditionals.push(additionals[1]);
		argadditionals.unshift(name);

		return argadditionals;
	}	
}

start
  = _ declarations:(variableDeclaration _)* _ code:code _
	{
		return {
			declarations: processDeclarations(declarations),
			code: code
		}
	}
code
	= (alwaysClause / ifClause)*

alwaysClause
	= "always" _ a:action ";" _
	{
		return {
			nodeType: 'CONTROL',
			controlFlow: 'ALWAYS',
			alwaysAction: a 
		}
	}	 


variableDeclaration
	= "var" _ varname:string _ "=" _ a:expr _ ";"
	{
		return {nodeType: 'VAR_DECL', variable: varname.value, binding: a}
	}

ifClause
	= "if" _ c1:clause _ comp:comparison _ c2:clause _ e:ifBody _ "endif" _
	{
		return {
			nodeType: 'CONTROL',
			controlFlow: 'IF',
			clause1: c1,
			comparison: comp,
			clause2: c2,
			bodyIfTrue: e
		}
	}

clause
	= GETTER_EXPR
	/ expr

GETTER_EXPR
	= "TOTAL_BALANCE" 
	{
		return {nodeType: 'GETTER', valueType: 'TOTAL_BALANCE'}
	}

	/ "STOCK_BALANCE"
	{
		return {nodeType: 'GETTER', valueType: 'STOCK_BALANCE'}
	}

	/ "CASH_BALANCE" 
	{
		return {nodeType: 'GETTER', valueType: 'CASH_BALANCE'}
	}

	/ "HAS_STOCK" "(" s:stock ")" 
	{
		return {nodeType: 'GETTER_FUN', getter: 'HAS_STOCK', args: [s]}
	}

	/ "STOCK_VALUE" "(" s:stock ")" 
	{
		return {nodeType: 'GETTER_FUN',getter: 'STOCK_VALUE', args: [s]}
	}

	/ "CHANGE_LAST_HOUR" "(" s:stock ")" 
	{
		return {nodeType: 'GETTER_FUN',getter: 'CHANGE_LAST_HOUR', args: [s]}
	}

	/ "CHANGE_SINCE_MORNING" "(" s:stock ")" 
	{
		return {nodeType: 'GETTER_FUN',getter: 'CHANGE_SINCE_MORNING', stock: s}
	}

	/ "CHANGE_LAST_WEEK" "(" s:stock ")" 
	{
		return {nodeType: 'GETTER_FUN',getter: 'LAST_WEEK_CHANGE', args: [s]}
	}

	/ "CHANGE_LAST_MONTH" "(" s:stock ")" 
	{
		return {nodeType: 'GETTER_FUN',getter: 'LAST_MONTH_CHANGE', args: [s]}
	}

	/ "VALUE_AT_DATE" "(" date:date "," _ s:stock ")" 
	{
		return {nodeType: 'GETTER_FUN', getter: 'VALUE_AT_DATE', date: date, stock: s}
	}

	/ "CHANGE_SINCE" "(" date:date "," _ s:stock ")"
	{
		return {nodeType: 'GETTER_FUN', getter: 'CHANGE_SINCE', date: date, stock: s}
	}

	/ "QUANTITY_HELD" "(" s:stock ")" 	
	{
		return {nodeType: 'GETTER_FUN', getter: 'QUANTITY_HELD', stock: s}
	}

	/ "CURRENT_PROFIT_FROM" "(" s:stock ")" 	
	{
		return {nodeType: 'GETTER_FUN', getter: 'CURRENT_PROFIT_FROM', stock: s}
	}

	/ "CURRENT_PROFIT_PERC_FROM" "(" s:stock ")" 	
	{
		return {nodeType: 'GETTER_FUN', getter: 'CURRENT_PROFIT_PERC_FROM', stock: s}
	}

	/ "RANDOM_STOCK" "()"
	{
		return {nodeType: 'GETTER_FUN', getter: 'RANDOM_STOCK'}
	}	

	/* User defined funcs */

	/ "EXTERNAL" "(" name:string "," _ args:additionalArgToExternal ")"
	{
		return {
			nodeType: 'GETTER_FUN',
			getter: 'EXTERNAL',
			name: name,
			args: processArgs(name, args)

		}
	}

/* 
How to allow dynamic number of arguments!
Answer: do it 'backwards' ... have optional first and compulsory last!
*/
additionalArgToExternal
	=  (arg "," _ )* arg

arg
	= GETTER_EXPR
	/ string
	/ integer

stockalias
	= GETTER_EXPR
	/ string

date 
	= d:integer "." m:integer "." y:integer
	{
		return {nodeType: 'LITERAL', valueType: 'DATE', day: d, month: m, year: y}
	}	

stock
	= s:string 
	{
		return s
		return {nodeType: 'LITERAL', valueType: 'STRING', value: s.join("")}
	}	

/* No if clause allowed */
expr
	= "("? _ e:minusExpr _ ")"?
	{
		return {
			nodeType: 'MATH_EXPR',
			expr: e

		}
	}
	/ "("? _ e:plusExpr _ ")"?
	{
		return {
			nodeType: 'MATH_EXPR',
			expr: e

		}
	}

	/ "("? _ a:arg _ ")"? {return a}


minusExpr
	= a1:arg _ "-" _ a2:expr {return {e1: a1, op: 'MINUS', e2: a2}}

plusExpr		
	= a1:arg _ "+" _ a2:arg {return {e1: a1, op: 'PLUS', e2: a2}}

mulExpr		
	= a1:arg _ "*" _ a2:arg {return {e1: a1, op: 'MUL', e2: a2}}

divExpr		
	= a1:arg _ "/" _ a2:arg {return {e1: a1, op: 'DIV', e2: a2}}

ifBody
	= statements:(statement ";" _)*
	{
		return processLines(statements);
	}


/* Note that order matters with === and == */
comparison
	= "<=" {return {nodeType: 'COMPARISON', value: '<='}}
	/ ">=" {return {nodeType: 'COMPARISON', value: '>='}}
	/ ">" {return {nodeType: 'COMPARISON', value: '>'}}
	/ "<" {return {nodeType: 'COMPARISON', value: '<'}}
	/ "==="	 {return {nodeType: 'COMPARISON', value: '=='}}
	/ "==" {return {nodeType: 'COMPARISON', value: '=='}}
	/ "=" {return {nodeType: 'COMPARISON', value: '=='}}



statement
	= action
	/ "return"	{return {nodeType: 'CONTROL',controlFlow: 'RETURN'}}

action 
	= "BUY_QUANTITY" a:amountstockclause 
	{
		return {nodeType: 'STAT',action: 'BUY_QUANTITY', args: [a.amount, a.stock]}
	}

	/ "BUY_PERCENTAGE" a:amountstockclause 
	{
		return {nodeType: 'STAT',action: 'BUY_PERCENTAGE', args: [a.amount, a.stock]}
	}

	/ "SELL_QUANTITY" a:amountstockclause 
	{
		return {nodeType: 'STAT',action: 'SELL_QUANTITY', args: [a.amount, a.stock]}
	}

	/ "SELL_ALL_OF" s:stockclause 
	{
		return {nodeType: 'STAT',action: 'SELL_ALL_OF', args: [s]}
	}

	/ "BAIL"
	{
		return {nodeType: 'STAT',action: 'BAIL', args: []}
	}

amountstockclause
	= "(" i:arg "," _ s:stockalias ")" {return {amount: i, stock: s}}

stockclause
	= "(" s:stockalias ")" {return s;}	

integer "integer"
  = neg:"-"? intdigits:[0-9]+ "." decimaldigits:[0-9]+ 
  {
  	return {
  		nodeType: 'LITERAL',
  		valueType: 'FLOAT',
  		value: parseFloat(intdigits.join("") + "." + decimaldigits.join(""), 10),
  		neg: !!neg
  	}
  }
  / neg:"-"? digits:[0-9]+ 
  { 
  	return {
  		nodeType: 'LITERAL', 
  		valueType: 'INT', 
  		value: parseInt(digits.join(""), 10),
  		neg: !!neg 
  	}
  }


string
	= s:[a-zA-Z]+ { return {nodeType: 'LITERAL', valueType: 'STRING', value: s.join("")}}

// optional whitespace
_  = [ \t\r\n]* {return null}

// mandatory whitespace
__ = [ \t\r\n]+ {return null}